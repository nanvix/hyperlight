[package]
name = "hyperlight-host"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true
readme.workspace = true
description = """
A lightweight Virtual Machine Manager that can be hosted in an application to safely
run untrusted or code within a VM partition with very low latency and overhead.
"""

[lib]
# https://docs.rust-embedded.org/book/interoperability/rust-with-c.html
name = "hyperlight_host"
bench = false # see https://bheisler.github.io/criterion.rs/book/faq.html#cargo-bench-gives-unrecognized-option-errors-for-valid-command-line-options

[lints]
workspace = true

[dependencies]
goblin = { version = "0.9" }
rand = { version = "0.9" }
cfg-if = { version = "1.0.0" }
libc = { version = "0.2.172" }
flatbuffers = "25.2.10"
page_size = "0.6.0"
termcolor = "1.2.0"
bitflags = "2.9.0"
log = "0.4.27"
tracing = { version = "0.1.41", features = ["log"] }
tracing-log = "0.2.0"
tracing-core = "0.1.33"
hyperlight-common = { workspace = true, default-features = true }
vmm-sys-util = "0.13.0"
crossbeam = "0.8.0"
crossbeam-channel = "0.5.15"
thiserror = "2.0.12"
tempfile = { version = "3.20", optional = true }
anyhow = "1.0"
metrics = "0.24.2"

[target.'cfg(windows)'.dependencies]
windows = { version = "0.61", features = [
    "Win32_Foundation",
    "Win32_System_LibraryLoader",
    "Win32_System_Threading",
    "Win32_System_JobObjects",
    "Win32_Security",
    "Win32_System_Diagnostics_Debug",
    "Win32_System_Hypervisor",
    "Win32_System_LibraryLoader",
    "Win32_System_Memory",
    "Win32_System_Threading",
    "Win32_System_JobObjects",
    "Win32_System_SystemServices",
] }
windows-sys = { version = "0.59", features = ["Win32"] }
windows-result = "0.3"
rust-embed = { version = "8.7.1", features = ["debug-embed", "include-exclude", "interpolate-folder-path"] }
sha256 = "1.6.0"
windows-version = "0.1"
lazy_static = "1.4.0"

[target.'cfg(unix)'.dependencies]
gdbstub = { version = "0.7.5", optional = true }
gdbstub_arch = { version = "0.3.1", optional = true }
seccompiler = { version = "0.5.0", optional = true }
kvm-bindings = { version = "0.11", features = ["fam-wrappers"], optional = true }
kvm-ioctls = { version = "0.21", optional = true }
mshv-bindings2 = { package="mshv-bindings", version = "=0.2.1", optional = true }
mshv-ioctls2 = { package="mshv-ioctls",  version = "=0.2.1", optional = true}
mshv-bindings3 = { package="mshv-bindings", version = "=0.3.2", optional = true }
mshv-ioctls3 = { package="mshv-ioctls",  version = "=0.3.2", optional = true}

[dev-dependencies]
uuid = { version = "1.16.0", features = ["v4"] }
signal-hook-registry = "1.4.5"
serde = "1.0"
proptest = "1.6.0"
tempfile = "3.20.0"
crossbeam-queue = "0.3.12"
tracing-serde = "0.2.0"
serial_test = "3.1.1"
hyperlight-testing = { workspace = true }
env_logger = "0.11.8"
tracing-forest = { version = "0.1.6", features = ["uuid", "chrono", "smallvec", "serde", "env-filter"] }
tracing = "0.1.41"
tracing-subscriber = {version = "0.3.19", features = ["std", "env-filter"]}
tracing-opentelemetry = "0.30.0"
opentelemetry = "0.29"
opentelemetry-otlp = { version = "0.29", features = ["default", "grpc-tonic"] }
opentelemetry-semantic-conventions = "0.29"
opentelemetry_sdk = { version = "0.29", features = ["rt-tokio"] }
tokio = { version = "1.45.0", features = ["full"] }
criterion = "0.5.1"
tracing-chrome = "0.7.2"
metrics-util = "0.19.1"
metrics-exporter-prometheus = "0.17.0"
tracing-tracy = "0.11.4"
serde_json = "1.0"

[target.'cfg(windows)'.dev-dependencies]
windows = { version = "0.61", features = [
    "Win32_System_Diagnostics_ToolHelp",
] }

[target.'cfg(unix)'.dev-dependencies]
proc-maps = "0.4.0"

[build-dependencies]
anyhow = { version = "1.0.98" }
cfg_aliases = "0.2.1"
built = { version = "0.8.0", optional = true, features = ["chrono", "git2"] }

[features]
default = ["kvm", "seccomp", "build-metadata", "init-paging"]
seccomp = ["dep:seccompiler"]
function_call_metrics = []
executable_heap = []
# This feature enables printing of debug information to stdout in debug builds
print_debug = []
crashdump = ["dep:tempfile"] # Dumps the VM state to a file on unexpected errors or crashes. The path of the file will be printed on stdout and logged. This feature can only be used in debug builds.
kvm = ["dep:kvm-bindings", "dep:kvm-ioctls"]
mshv2 = ["dep:mshv-bindings2", "dep:mshv-ioctls2"]
mshv3 = ["dep:mshv-bindings3", "dep:mshv-ioctls3"]
# This enables easy debug in the guest
gdb = ["dep:gdbstub", "dep:gdbstub_arch"]
fuzzing = ["hyperlight-common/fuzzing"]
build-metadata = ["dep:built"]
init-paging = []

[[bench]]
name = "benchmarks"
harness = false
